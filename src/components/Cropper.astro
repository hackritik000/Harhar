---
const { name, src = "./profile.png" } = Astro.props;
import "cropperjs/dist/cropper.css";
---

<div class="cropperForm">
  <label for="cropperFormInput">
    <img class="cropperFormImg" src={src} alt="profile Image" />
  </label>
  <input id="cropperFormInput" type="file" name={name} accept="image/*" />
</div>

<div class="cropperBox">
  <div>
    <div class="canvasContainer"></div>
    <div>
      <div class="croppedPreview"></div>
      <button class="cropBtn">Crop Image</button>
    </div>
  </div>
</div>

<script>
  import Cropper from "cropperjs";
  let cropper: Cropper;

  const cropperFormImg = document.querySelector(
    ".cropperFormImg",
  ) as HTMLImageElement;
  const cropperFormInput = document.getElementById(
    "cropperFormInput",
  ) as HTMLInputElement;
  const cropperBox = document.querySelector(".cropperBox") as HTMLDivElement;
  const canvasContainer = document.querySelector(
    ".canvasContainer",
  ) as HTMLDivElement;
  const cropBtn = document.querySelector(".cropBtn") as HTMLButtonElement;

  cropperFormInput.addEventListener("change", (event: Event) => {
    const inputElement = event.target as HTMLInputElement;
    if (!inputElement.files || !inputElement.files[0]) {
      return;
    }
    const file = inputElement.files[0];
    const blobURL = URL.createObjectURL(file);
    if (!blobURL) {
      return;
    }
    const canvasImg = document.createElement("img") as HTMLImageElement;
    canvasImg.src = blobURL;
    canvasImg.className = "canvasImg";
    canvasContainer?.append(canvasImg);
    initializeCropper();
    cropperBox.style.display = "block";
  });

  function initializeCropper() {
    const canvasImg = document.querySelector(".canvasImg") as HTMLImageElement;
    cropper = new Cropper(canvasImg, {
      aspectRatio: 1,
      viewMode: 0,
      preview: ".croppedPreview",
    });
  }

  cropBtn.addEventListener("click", (e: Event) => {
    if (!cropper) {
      return;
    }
    e.preventDefault();
    const croppedCanvas = cropper.getCroppedCanvas();
    cropperFormImg.src = croppedCanvas.toDataURL();

    cropper.getCroppedCanvas().toBlob((blob) => {
      if (!blob) {
        return;
      }
      const croppedFile = new File(
        [blob],
        "croppedImage." + blob?.type.split("image/").at(1),
        {
          type: blob?.type,
        },
      );
      const dataTransfer = new DataTransfer();
      dataTransfer.items.add(croppedFile);
      cropperFormInput.files = dataTransfer.files;
    });
    cropperBox.style.display = "none";
  });
</script>

<style lang="scss">
  @use "@/style/mixin.scss" as m;
  .cropperBox {
    container-type: inline-size;
    & > div {
      display: flex;
      position: relative;
      flex-wrap: wrap;
      width: 100%;
      flex-direction: row;
      .croppedPreview {
        border-radius: 50%;
        overflow: hidden;
        aspect-ratio: 16/9;
        @include m.autoMinMaxSize("width", 100, 200);
      }
    }
    display: none;
    border: 3px solid darkblue;
    position: absolute;
    aspect-ratio: 1;
    @media screen and (min-width: 486px) {
      aspect-ratio: 16/9;
      .croppedPreview {
        height: 100%;
        aspect-ratio: 1;
      }
    }
    @include m.autoMinMaxSize("width", 320, 900);
    overflow-y: scroll;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    background-color: aquamarine; // change this
    z-index: 10;
  }

  .cropperForm {
    border: 1px solid silver;
    width: 100%;
    aspect-ratio: 1;
    border-radius: 50%;
    cursor: pointer;
    position: relative;
    overflow: hidden;
    label {
      display: block;
      height: 100%;
      width: 100%;
      img {
        display: block;
        width: inherit;
        height: inherit;
      }
    }
    input {
      display: none;
    }
  }
</style>
<style is:global>
  .canvasImg {
    display: block;
    max-width: 100%;
  }
</style>
